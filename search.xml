<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>多文件编译</title>
    <url>/2020/09/01/September1th/</url>
    <content><![CDATA[<h1 id="找到一个或多个多重定义的文件"><a href="#找到一个或多个多重定义的文件" class="headerlink" title="找到一个或多个多重定义的文件"></a>找到一个或多个多重定义的文件</h1><p>在C++/C中，多文件编译不需要引入其他自己写的cpp文件，只需要声明，但是只能有一个main()方法。比如在A.cpp中使用b.cpp中的test()方法，只需要在A.cpp中声明test()方法,关键字extern可加可不加例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//B.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++/C</category>
      </categories>
      <tags>
        <tag>c++/c</tag>
        <tag>extern</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet规范</title>
    <url>/2020/08/20/Servlet%E8%A7%84%E8%8C%83%E4%B8%8E%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h2 id="Servlet规范"><a href="#Servlet规范" class="headerlink" title="Servlet规范"></a>Servlet规范</h2><p>浏览器发给服务器一个http请求，服务器调用服务端程序处理，不同的请求由不同的JAVA类来处理。如果在服务器代码里使用大量ifelse判断，会将业务逻辑和服务器代码耦合到一起。由此servlet接口诞生，各种业务类必须实现这个接口。</p>
<p><strong>Servlet容器用来加载和管理业务类，http服务器不直接和业务类接触，它将请求交给Servelt容器处理，容器将请求转发给具体的Servlet类，若这个Servlet还没创建则加载并实例化，然后调用接口方法。</strong></p>
<a id="more"></a>

<p> Servlet 接口和 Servlet 容器这一整套规范叫作 <strong>Servlet 规范</strong>，Tamcat和Jetty都按照Servlet规范实现了Servlet容器。</p>
<h2 id="Servlet接口"><a href="#Servlet接口" class="headerlink" title="Servlet接口"></a>Servlet接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function">ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res）<span class="keyword">throws</span> ServletException, IOExc</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params"> String getServletInfo()</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>service接口实现业务逻辑，ServletRequest封装请求信息。Tamcat中HTTPServletRequest继承ServletRequest，Tamcat中对service接口的实现主要调用doGet和doPost方法。</p>
<p>Servlet容器在加载Servlet类时调用init，在卸载时调用destroy方法。</p>
<p>通过继承 HttpServlet 类来实现自己的 Servlet，只需要重写两个方法：doGet 和 doPost。</p>
<h2 id="Servlet容器工作流程"><a href="#Servlet容器工作流程" class="headerlink" title="Servlet容器工作流程"></a>Servlet容器工作流程</h2><p>客户机传递http请求给服务器，服务器转给Servlet容器。根据请求的URL和Servlet映射关系找到Servlet类，调用Init()初始化, service()处理请求。</p>
<h2 id="Servlet部分接口说明"><a href="#Servlet部分接口说明" class="headerlink" title="Servlet部分接口说明"></a>Servlet部分接口说明</h2><p><strong>ServletConfig</strong> 的作用就是封装 Servlet 的初始化参数。你可以在 web.xml 给 Servlet 配置参数，并在程序里通过 getServletConfig 方法拿到这些参数。</p>
<p><strong>ServletContext</strong>对应一个 Web 应用。Web 应用部署好后，Servlet 容器在启动时会加载 Web 应用，并为每个Web 应用创建唯一的 ServletContext 对象。你可以把 ServletContext 看成是一个全局对象，一个 Web 应用可能有多个 Servlet，这些 Servlet 可以通过全局的ServletContext 来共享数据，这些数据包括 Web 应用的初始化参数、Web 应用目录下的文件资源等。由于 ServletContext 持有所有 Servlet 实例，你还可以通过它来实现 Servlet 请求的转发。</p>
<h2 id="Servlet规范扩展机制"><a href="#Servlet规范扩展机制" class="headerlink" title="Servlet规范扩展机制"></a>Servlet规范扩展机制</h2><h3 id="FIlter"><a href="#FIlter" class="headerlink" title="FIlter"></a>FIlter</h3><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3>]]></content>
      <categories>
        <category>Tamcat</category>
      </categories>
      <tags>
        <tag>servlet接口</tag>
        <tag>servlet容器</tag>
        <tag>filter</tag>
        <tag>listener</tag>
      </tags>
  </entry>
  <entry>
    <title>http协议</title>
    <url>/2020/08/19/http/</url>
    <content><![CDATA[<p>http本身就是一个“http服务器 + Servlet容器”<br>Tamcat和Jetty都是Servlet引擎（Web容器），主要完成接受连接，解析请求数据，处理请求，发送响应，多线程技术提升并发性</p>
<a id="more"></a>
<h2 id="HTTP本质"><a href="#HTTP本质" class="headerlink" title="HTTP本质"></a>HTTP本质</h2><p>HTTP协议是应用层浏览器与服务器之间数据传输协议，基于TCP/IP协议传递数据，不涉及数据包传输，主要规定浏览器与服务器之间通信格式。</p>
<p>与服务器建立连接，浏览器生成请求数据发给服务器，包含（获取内容还是提取内容，想要什么内容等等）。</p>
<h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><p><img src="https://s1.ax1x.com/2020/08/18/dMcDaR.png" alt="image-20200818233526968"></p>
<p>http请求到达Tomcat，将http请求数据解析为Request对象，由web应用处理后得到一个Response对象，Tamcat将Response对象解析成http格式的响应数据。</p>
<h2 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h2><p>http协议无状态，请求与请求之间没有关系，导致web应用再刷新后原有填充数据消失。诞生Cookie，使请求与请求之间有了联系，并且web应用能够知道请求来自哪个用户。</p>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>web应用将用户信息储存在Cookie中，用户在验证后的每次http请求都会带着Cookie。</p>
<p>Cookie本质是存储在本地的文件，包含每次请求中都需要传递的信息。</p>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>Session可以理解为服务器开辟的空间，保存了用户的状态，比Cookie更安全。当用户http请求到来时，服务器通过Session ID把用户请求与用户的session对应起来。服务器set session生产Session ID放进http响应的响应头里，浏览器将Session ID添进Cookie。</p>
<h4 id="Session的创建与存储"><a href="#Session的创建与存储" class="headerlink" title="Session的创建与存储"></a>Session的创建与存储</h4><p>由Web容器创建，Tamcat 的 Session 管理器提供了多种持久化方案来存储 Session，通常会采用高性能的存 储方式，比如 Redis，并且通过集群部署的方式，防止单点故障，从而提升高可用。同时， Session 有过期时间，因此 Tomcat 会开启后台线程定期的轮询，如果 Session 过期了就 将 Session 失效。</p>
]]></content>
      <categories>
        <category>Tamcat</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>Cookie</tag>
        <tag>Session</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab矩阵运算</title>
    <url>/2020/08/20/studyMatlab_01/</url>
    <content><![CDATA[<h2 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h2><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p><strong>行注释</strong>：%</p>
<p>”<strong>,</strong>“和“<strong>;</strong>”都可以在一行里隔断<strong>多条命令</strong>，“,”会使“,”之前的命令显示结果</p>
<p><strong>命令换行符</strong>：”…”</p>
<p><strong>who</strong>和<strong>whos</strong>命令：查询所命名的变量</p>
<a id="more"></a>

<p><strong>clear</strong>命令：清理当前工作空间里所有定义过的变量，可以加上参数，只清理特定变量，例如:</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear a b <span class="comment">%清理变量a和b</span></span><br></pre></td></tr></table></figure>

<p><strong>上箭头/下箭头</strong>：调用往前往后的命令</p>
<p><strong>lookfor</strong> abc:查询包含abc的函数名字和说明</p>
<p><strong>help</strong> sin:查询sin函数用法</p>
<p><strong>转置符号</strong> : <strong>‘</strong></p>
<h3 id="常用特殊变量"><a href="#常用特殊变量" class="headerlink" title="常用特殊变量"></a>常用特殊变量</h3><table>
<thead>
<tr>
<th>特殊变量</th>
<th>取值</th>
</tr>
</thead>
<tbody><tr>
<td>ans</td>
<td>结果的缺省变量值</td>
</tr>
<tr>
<td>pi</td>
<td>圆周率</td>
</tr>
<tr>
<td>naN</td>
<td>不定值，如0/0</td>
</tr>
<tr>
<td>realmin</td>
<td>最小的正实数</td>
</tr>
<tr>
<td>realmax</td>
<td>最大的正实数</td>
</tr>
<tr>
<td>inf</td>
<td>无穷大，如1/0</td>
</tr>
<tr>
<td>i,j</td>
<td>虚数单位 <img src="https://s1.ax1x.com/2020/08/20/d82qte.png" alt="image-20200820142744671"></td>
</tr>
<tr>
<td>eps</td>
<td>浮点运算的相对精度</td>
</tr>
</tbody></table>
<h3 id="运算执行顺序"><a href="#运算执行顺序" class="headerlink" title="运算执行顺序"></a>运算执行顺序</h3><p>从左到右，幂运算优先级最高，乘法除法优先级相同，加法减法优先级最低且相同，括号可以改变执行顺序，从内括号向外执行，只存在小括号。</p>
<h2 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h2><h3 id="向量运算"><a href="#向量运算" class="headerlink" title="向量运算"></a>向量运算</h3><h4 id="生成行向量"><a href="#生成行向量" class="headerlink" title="生成行向量"></a>生成行向量</h4><p>1.空格或者逗号分隔生成行向量</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">y = [<span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>

<p>2.使用冒号表达式</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = n:s:m</span><br><span class="line">a = <span class="number">1</span>:<span class="number">4</span> <span class="comment">% a=[1 2 3 4]</span></span><br><span class="line">b = <span class="number">1</span>:<span class="number">2</span>:<span class="number">8</span> <span class="comment">% b=[1 3 5 7]</span></span><br></pre></td></tr></table></figure>

<p>从n到m所有标量，s为步长（缺省时为1），m不一定是最后一个分量，n通过步长增加时不超过m</p>
<p>3.使用linspace函数</p>
<p>linspace(x1, x2, n)生成以x1为首向量，x2为末向量的n维线性等分行向量</p>
  <figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">linspace</span>(<span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>) <span class="comment">% x=[2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure>

<h5 id="生成列向量"><a href="#生成列向量" class="headerlink" title="生成列向量"></a>生成列向量</h5><p>1.转置行向量</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% x为行向量</span></span><br><span class="line">y = x&#x27;</span><br></pre></td></tr></table></figure>

<p>2.分号分隔生成列向量</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">z = [<span class="number">5</span>; <span class="number">6</span>]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MATLAB</category>
      </categories>
      <tags>
        <tag>matlab向量运算</tag>
        <tag>matlab基本运算</tag>
        <tag>matlab简单命令</tag>
        <tag>matlab常见特殊变量</tag>
      </tags>
  </entry>
  <entry>
    <title>win10自己能用到的常见快捷键</title>
    <url>/2020/08/07/win10%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h1 id="win10常见快捷键-表格"><a href="#win10常见快捷键-表格" class="headerlink" title="win10常见快捷键 表格"></a>win10常见快捷键 表格</h1><a id="more"></a>

<table>
<thead>
<tr>
<th>ID</th>
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>win D</td>
<td>进入桌面，并且所有窗口最小化</td>
</tr>
<tr>
<td>2</td>
<td>win G</td>
<td>录屏</td>
</tr>
<tr>
<td>3</td>
<td>win H</td>
<td>语音输入</td>
</tr>
<tr>
<td>4</td>
<td>win W</td>
<td>白板（第一次使用右下角弹出白板安装按钮）</td>
</tr>
<tr>
<td>5</td>
<td>win V</td>
<td>剪贴板</td>
</tr>
<tr>
<td>6</td>
<td>win L</td>
<td>锁屏，进入PIN登录进入界面</td>
</tr>
<tr>
<td>7</td>
<td>win R</td>
<td>打开运行窗口</td>
</tr>
<tr>
<td>8</td>
<td>win tab</td>
<td>打开任务视图，其左上角可以打开新的桌面，并可以用鼠标切换</td>
</tr>
<tr>
<td>9</td>
<td>win ctrl  &lt;一  win ctrl  一&gt;</td>
<td>切换桌面</td>
</tr>
<tr>
<td>10</td>
<td>win P</td>
<td>投影</td>
</tr>
<tr>
<td>11</td>
<td>win K</td>
<td>连无线显示器，音频设备，蓝牙设备等</td>
</tr>
<tr>
<td>12</td>
<td>win + 和 win -</td>
<td>放大缩小</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Windows 10</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
      </tags>
  </entry>
</search>
